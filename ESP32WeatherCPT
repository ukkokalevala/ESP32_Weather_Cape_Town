#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define OLED_RESET    -1   // Reset pin (or -1 if sharing Arduino reset pin)

// Create an instance of the OLED display
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// WiFi credentials
const char* ssid = "Antonelli";
const char* password = "maomao1206";

// Weather API details
const char* apiEndpoint = "http://api.openweathermap.org/data/2.5/weather";
const char* apiKey = "YOUR_API_KEY";  // Replace with your OpenWeatherMap API key

void setup() {
  Serial.begin(115200);
  Wire.begin(7, 6); // SDA = 7, SCL = 6
  // Initialize OLED display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // I2C address for most displays is 0x3C
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);  // Halt execution if OLED initialization fails
  }

  // Initialize OLED with correct I2C pins for ESP32-C3
  //Wire.begin(7, 6); // SDA = 7, SCL = 6

  // Clear any logo or data that might be stuck in the display buffer
  display.clearDisplay();
  display.display();  // Force the OLED to refresh

  // Display "Connecting to WiFi..." on the OLED
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Connecting to WiFi...");
  display.display();  // Ensure this gets updated on screen

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Clear the display once connected
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Fetching weather...");
  display.display();
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    
    // Construct API URL using city name (Cape Town, South Africa) and API key
    String url = String(apiEndpoint) + "?q=Cape+Town,ZA&appid=" + String(apiKey) + "&units=metric";
    Serial.println("Requesting URL: " + url);

    HTTPClient http;
    http.begin(client, url);
    int httpCode = http.GET();

    if (httpCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpCode);

      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        Serial.println("Payload received: ");
        Serial.println(payload);

        // Parse JSON response
        DynamicJsonDocument doc(2048);
        DeserializationError error = deserializeJson(doc, payload);

        if (error) {
          Serial.println("JSON Parsing failed");
          display.clearDisplay();
          display.setCursor(0, 0);
          display.print("Error: JSON parse");
          display.display();
          return;
        }

        // Extract temperature and weather description
        double temperature = doc["main"]["temp"];
        const char* description = doc["weather"][0]["main"];

        // Display weather data on OLED
        display.clearDisplay();   // Clear the screen before updating
        display.setCursor(0, 0);
        display.print("Temp CPT: ");
        display.print(temperature, 1);
        display.print(" C");

        display.setCursor(0, 10);
        display.print("Weather: ");
        display.print(description);
        display.display();  // Ensure this gets updated on screen

        // Debugging print
        Serial.println("Temperature: " + String(temperature));
        Serial.println("Weather: " + String(description));
      }
    } else {
      Serial.print("HTTP Request failed, error code: ");
      Serial.println(httpCode);
      
      // Display error on OLED
      display.clearDisplay();
      display.setCursor(0, 0);
      display.print("HTTP Error:");
      display.setCursor(0, 10);
      display.print(httpCode);
      display.display();
    }

    http.end();  // Close connection
  }

  delay(60000);  // Fetch weather every 60 seconds
}
